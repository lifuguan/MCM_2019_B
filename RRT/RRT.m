%%
% source position in Y, X format
point_up = [151, 1200];
point_left = [141, 481];
point_right = [401, 1336];

% all the cities
cities = [
    564,  799;  548, 1064;
    607,  523;  394,  502;
    203,  484;  838,  458;
    123,  450;  1012, 425;
      123,  339;
    943,  312;  1129, 285;
    525,  279;  372,  249;
    1483, 220;  878,  208;
    225,  194;  1162, 194;
    1066, 190;  1033, 157;
    115 ,  118;  743,  117;
    1145, 110;  814,  107;
    928 ,   94;  1072,  88;
    512 ,   82;  313,   80
];

cities_on_right = [
    1328, 389; 557, 1064;
    4333, 1010; 259, 1134;
    199, 1162; 436, 1013;
    316, 957; 112, 1151; 
    199, 1066; 170, 1023;
    232, 1482; 560, 1061;
    560, 800; 459, 835
];

cities_on_left = [
    78, 313; 191, 212;
    277, 524; 504, 390;
    470, 210; 452, 115;
    341, 120; 119, 121;
];

cities_on_up = [
    1328, 389; 557, 1064;
    4333, 1010; 259, 1134;
    199, 1162; 436, 1013;
    316, 957; 112, 1151; 
    199, 1066; 170, 1023;
    232, 1482; 560, 1061;
    560, 800; 459, 835
];

%%
points_in_right_circle =  [
    455,1314;455,1304;455,1294;452,1284;457,1324;465,1291;449,1330;457,1275;440,1335;430,1337;420,1334;410,1334;402,1328;408,1344;394,1322;384,1322;402,1352;378,1314;368,1312;363,1303;394,1358;361,1293;394,1368;352,1288;342,1288;334,1294;326,1300;446,1343;320,1292;371,1291;312,1286;312,1276;312,1266;313,1256;308,1247;309,1237;310,1227;392,1378;475,1291;298,1249;288,1248;393,1388;278,1247;273,1238;387,1396;270,1228;269,1218;270,1208;262,1202;264,1192;252,1200;377,1398;482,1283;270,1253;490,1277;500,1275;505,1266;505,1256;377,1408;367,1410;319,1237;362,1419;353,1424;376,1282;260,1251;347,1432;269,1263;250,1252;300,1227;515,1256;378,1304;240,1254;346,1442;327,1231;336,1442;326,1441;232,1260;233,1270;223,1273;213,1271;317,1305;260,1223;204,1266;410,1321;194,1263;194,1273;503,1285;188,1255;320,1315;283,1237;324,1451;337,1233;375,1272;318,1459;279,1219;318,1469;310,1476;302,1482;293,1487;345,1418;283,1489;273,1489;263,1488;258,1497;254,1483;345,1227;244,1483;299,1495;396,1312;234,1486;224,1487;308,1500;365,1270;363,1280;355,1224;222,1477;335,1417;524,1261;365,1223;325,1414;280,1499;530,1253;532,1243;384,1355;196,1248;533,1233;328,1321;181,1291;187,1299;181,1307;532,1267;315,1415;326,1331;255,1242;374,1354;366,1322;356,1265;364,1355;538,1275;267,1502;263,1271;490,1267;482,1261;255,1265;465,1315;187,1315;540,1253;181,1323;299,1217;326,1404;354,1358;173,1329;171,1308;196,1320;412,1311;550,1253;539,1285;560,1253;382,1387;250,1224;197,1238;240,1244;178,1338;418,1303;336,1333;265,1281;381,1294;346,1262;200,1228;181,1279;206,1322;299,1207;560,1243;474,1320;240,1222;275,1479;184,1346;210,1227;480,1251;478,1241;479,1329;396,1344;315,1405;445,1312;560,1233;560,1223;561,1213;562,1203;556,1195;556,1185;557,1175;557,1165;334,1427;345,1363;260,1212;383,1332;469,1236;305,1405;464,1227;374,1262;257,1287;304,1198;295,1407;305,1188;230,1246;305,1178;480,1339;305,1168;310,1159;296,1163;310,1149;302,1143;340,1372;308,1135;315,1178;526,1145;323,1185;314,1127;517,1140;217,1281;322,1121;330,1374;178,1354;529,1282;465,1217;508,1145;297,1417;225,1287;329,1193;332,1121;255,1297;300,1129;220,1244;260,1233;342,1121;487,1292;323,1254;503,1136;260,1306;474,1347;351,1126;172,1362;494,1141;332,1396;359,1132;369,1253;336,1382;339,1192;332,1364;342,1341;428,1302;275,1469;287,1418;320,1135;171,1318;464,1344;349,1195;178,1370;352,1340;188,1369;528,1292;331,1248;346,1383;207,1239;257,1184;181,1380;299,1153;326,1143;252,1312;247,1181;427,1292;426,1282;295,1180;348,1393;334,1354;368,1332;255,1322;359,1193;281,1426;206,1312;244,1306;460,1208;234,1307;320,1156;237,1183;230,1225;367,1345;270,1304;369,1190;339,1202;461,1198;352,1375;437,1292;265,1295;365,1124;374,1119;379,1189;318,1482;178,1390;384,1117;469,1246;188,1391;497,1293;468,1328;397,1302;189,1428;387,1183;277,1459;242,1296;336,1141;336,1260;392,1110;177,1400;400,1104;294,1197;242,1265;410,1104;230,1236;197,1396;349,1298;473,1278;240,1494;393,1334;455,1190;456,1338;324,1202;224,1308;321,1212;271,1451;359,1432;247,1234;457,1180;467,1178;439,1302;294,1137;520,1298;477,1181;344,1353;340,1408;455,1170;212,1304;373,1109;439,1325;223,1193;265,1443;515,1307;302,1508;416,1112;330,1156;348,1207;255,1442;389,1126;470,1268;308,1490;218,1296;249,1450;462,1262;544,1165;347,1185;416,1280;454,1256;333,1131;195,1406;273,1432;330,1341;520,1316;394,1191;189,1285;487,1182;292,1503;342,1176;284,1137;404,1190;414,1190;287,1225;492,1191;282,1209;207,1208;275,1293;342,1252;293,1513;420,1182;496,1303;448,1248;284,1288;512,1322;402,1114;289,1146;189,1418;358,1316;523,1233;536,1159;502,1324;212,1251
];

points_in_left_circle =  [
    116,704;111,695;116,686;121,677;120,667;121,657;121,647;127,639;125,629;125,619;125,609;122,599;121,589;112,602;120,579;121,569;122,559;128,551;137,546;147,548;112,558;102,555;111,650;101,653;112,548;110,538;107,528;112,519;106,511;104,501;104,491;102,481;104,471;103,461;101,451;109,445;118,440;92,482;135,609;104,436;94,499;122,519;108,680;126,689;94,469;84,466;76,460;84,502;85,512;101,663;82,483;152,557;132,520;144,614;111,612;127,445;152,620;162,621;101,612;150,567;168,629;178,630;66,458;184,638;114,488;184,648;194,650;98,622;117,530;94,433;94,604;88,425;69,448;150,630;128,455;78,425;69,420;71,410;74,400;138,454;73,390;70,380;73,370;131,655;148,454;67,438;129,699;80,521;156,460;163,452;170,444;180,445;190,443;196,435;202,427;208,419;213,410;219,402;225,394;224,384;230,376;240,375;77,435;250,373;256,365;262,357;128,465;254,351;271,362;277,354;283,346;291,340;249,342;301,338;311,340;241,336;238,326;239,316;230,311;275,340;318,348;181,455;224,303;328,350;84,400;119,479;255,382;260,391;266,399;165,712;269,332;175,710;199,414;193,406;91,520;110,592;190,396;181,465;257,404;260,414;344,379;97,632;129,480;229,321;196,640;74,477;206,641;214,634;224,631;250,416;232,637;238,645;176,474;230,623;248,642;214,305;191,386;230,613;211,295;216,286;221,277;219,267;209,265;182,702;229,603;264,323;182,658;98,681;251,426;141,654;238,655;244,663;232,593;211,276;254,436;262,442;256,450;251,459;250,671;257,467;147,640;130,577;251,681;231,583;259,477;274,393;284,396;269,478;293,401;223,577;178,484;168,487;168,497;240,419;271,488;190,376;272,498;301,407;254,634;272,442;309,413;222,567;277,507;171,507;282,441;132,530;272,516;281,521;317,419;266,524;98,642;192,366;158,486;316,429;244,689;100,538;322,437;290,434;269,372;287,529;131,510;330,443;156,645;147,465;220,326;339,448;255,624;182,365;256,523
];

points_in_up_circle =  [
    361,1293;352,1288;342,1288;334,1294;326,1300;320,1292;312,1286;312,1276;312,1266;313,1256;308,1247;309,1237;310,1227;298,1249;288,1248;278,1247;273,1238;270,1228;269,1218;270,1208;262,1202;264,1192;252,1200;270,1253;319,1237;260,1251;269,1263;250,1252;300,1227;240,1254;327,1231;232,1260;233,1270;223,1273;213,1271;317,1305;260,1223;204,1266;194,1263;194,1273;188,1255;320,1315;283,1237;178,1257;177,1267;173,1248;168,1239;337,1233;160,1233;279,1219;171,1275;158,1223;152,1215;150,1205;148,1195;148,1185;148,1175;148,1165;151,1155;154,1145;157,1135;160,1125;158,1115;138,1175;128,1173;161,1277;118,1175;345,1227;158,1186;110,1181;168,1114;171,1104;174,1094;365,1270;363,1280;168,1185;355,1224;173,1285;126,1163;365,1223;196,1248;328,1321;117,1158;110,1150;105,1141;177,1190;181,1291;187,1299;181,1307;102,1131;164,1147;326,1331;255,1242;185,1184;356,1265;151,1274;263,1271;176,1120;255,1265;184,1126;187,1315;141,1271;181,1323;299,1217;162,1099;153,1094;152,1084;173,1329;171,1308;163,1331;131,1274;196,1320;123,1280;102,1121;250,1224;197,1238;240,1244;174,1148;178,1338;336,1333;265,1281;148,1117;150,1104;346,1262;140,1206;153,1332;184,1147;200,1228;181,1279;194,1148;132,1200;206,1322;299,1207;112,1129;240,1222;184,1346;140,1102;121,1134;210,1227;158,1243;143,1331;134,1094;127,1086;138,1112;135,1158;115,1274;127,1076;128,1066;130,1056;138,1050;141,1040;143,1030;143,1020;152,1015;152,1005;154,995;153,985;153,975;260,1212;164,995;118,1091;374,1262;257,1287;162,1018;170,987;178,1200;304,1198;180,987;305,1188;170,1025;230,1246;305,1178;120,1123;305,1168;310,1159;195,1158;133,1018;118,1064;296,1163;310,1149;178,1019;302,1143;308,1135;188,1019;315,1178;323,1185;191,1029;110,1115;314,1127;217,1281;322,1121;178,1354;204,1148;170,1206;123,1017;225,1287;329,1193;197,1138;141,1060;332,1121;255,1297;153,1029;300,1129;118,1008;220,1244;333,1111;203,1165;260,1233;342,1121;323,1254;339,1103;260,1306;173,1035;345,1095;351,1126;342,1085;172,1362;359,1132;334,1079;369,1253;339,1192;144,1142;102,1109;204,1130;102,1156;150,1065;201,1031;190,1039;143,987;182,1045;160,1063;133,1329;320,1135;171,1318;102,1166;349,1195;178,1370;94,1172;210,1026;188,1369;342,1072;206,1120;196,1047;133,985;218,1020;216,1117;213,1167;221,1161;162,1200;227,1153;228,1018;331,1248;135,1319;179,977;234,1026;207,1239;257,1184;181,1380;128,1289;226,1115;179,1135;299,1153;110,1265;326,1143;252,1312;247,1181;115,1023;295,1180;97,1100;105,1025;187,1205;235,1147;117,1107;227,1105;255,1322;228,1034;236,1040;170,1175;359,1193;110,1255;91,1092;206,1312;138,1134;93,1182;224,1095;244,1306;127,1313;146,1128;228,1139;239,1050;246,1038;234,1307;162,1084;320,1156;237,1183;230,1225;220,1145;171,1079;145,1074;245,1150;270,1304;205,1175;197,1204;109,1015;138,1186;369,1190;212,1012;339,1202;112,1245;178,1009;265,1295;365,1124;171,1216;181,1078;379,1189;131,1038;178,1390;184,1215;221,1126;196,1117;188,1391;205,1198;101,1009;132,1212;132,1008;189,1428;242,1296;336,1141;336,1260;95,1192;191,1176;175,1166;177,1400;213,1192;143,1089;124,1099;90,1082;169,1158;110,1057;294,1197;111,1099;90,1072;242,1265;206,1047;240,1018;165,1041;230,1236;105,1035;197,1396;237,1106;96,1000;256,1041;148,1050;190,1229;349,1298;101,1090;243,1114;138,1000;163,974;88,994;103,1198;258,1051;324,1202;224,1308;173,1069;104,1208;123,1044;321,1212;94,986;247,1234;100,1074;183,1157;252,1059;248,1140;256,1134;294,1137;212,1304;223,1193;249,1106;188,1007;215,1182;181,1242;111,1043;245,1009;264,1128;330,1156;348,1207;245,1067;213,1153;161,1073;99,1043;179,1425;169,1425;218,1296;247,1129;248,1096;198,1107;199,1097;209,1095;110,1216;266,1040;347,1185;250,1086;255,1069;333,1131;195,1406;249,1028;243,1078;330,1341;194,1128;357,1096;130,1118;189,1285;169,1136;259,1104;342,1176;243,999;253,999;188,1107;192,1089;258,1092;284,1137;263,997;155,1039;206,1004;311,1117;158,1174;287,1225;215,1042;200,1012;282,1209;126,1299;171,1049;239,1135;207,1208;275,1293;194,1214;342,1252;268,1089;179,1232;276,1041;254,1019;253,1121;278,1088;235,1066;231,1125;270,1120;284,1288;177,1415;116,998;287,1083;172,969;285,1046;289,1146;348,1108;189,1418;276,1078;209,1139;269,1104;174,997;207,994;240,989;188,1195;212,1251;133,1028;235,1008
];
%% load and display the map

map = im2bw(imread('dst_dilated.jpg'));
map_with_color = imread('cricle.png');
if true, figure,imshow(map_with_color); rectangle('position',[1 1 size(map)-1],'edgecolor','k'); end

%% flight schedule in circle 
for i = 1:length(points_in_right_circle)
    line( [1336, points_in_right_circle(i,2)], [401, points_in_right_circle(i,1)], 'linewidth', 1, 'color', 'g');
end

for i = 1:length(points_in_left_circle)
    line([481,points_in_left_circle(i,2)], [141, points_in_left_circle(i,1)], 'linewidth', 1, 'color', 'g');
end

for i = 1:length(points_in_up_circle)
    line([1200 , points_in_up_circle(i,2)] , [151, points_in_up_circle(i,1)], 'linewidth', 1, 'color', 'g');
end

%% display the trajectory of the plan
for i = 1:length(cities_on_right)
    path_res = rrt_path_planning(map, point_right, cities_on_right(i,:), false);
    if size(path_res) <= 2
        disp(path_res);
    else
        line(path_res(:, 2), path_res(:, 1), 'linewidth', 1, 'color', 'r');
    end
end

for i = 1:length(cities_on_left)
    path_res = rrt_path_planning(map, point_left, cities_on_left(i,:), false);
    if size(path_res) <= 2
        disp(path_res);
    else
        line(path_res(:, 2), path_res(:, 1), 'linewidth', 1, 'color', 'g');
    end
end

for i = 1:length(cities_on_up)
    path_res = rrt_path_planning(map, point_up, cities_on_up(i,:), false);
    if size(path_res) <= 2
        disp(path_res);
    else
        line(path_res(:, 2), path_res(:, 1), 'linewidth', 1, 'color', 'b');
    end
end


%%
% rrt_path_planning - RRT path plannign function
%
% Syntax: path_res = rrt_path_planning(map, source, goal, display)
% map : the binary image 
% source : the lander zone 
% goal : the target zone (cities or hotpitals)
% display : (true : enable display the track) / (false : disable display the track)
% Long description
function path_res = rrt_path_planning(map, source, goal, display)

    %% RRT parameters
    stepsize = 10;  % size of each step of the RRT
    threshold = 10; % nodes closer than this threshold are taken as almost the same
    maxFailedAttempts = 20000;

    if ~feasiblePoint(source,map) || ~feasiblePoint(goal,map)
        disp('source lies on an obstacle or outside map'); 
        path_res = goal;
        return;
    end

    tic;  % tic-toc: Functions for Elapsed Time

    RRTree = double([source -1]); % RRT rooted at the source, representation node and parent index
    failedAttempts = 0;
    counter = 0;
    pathFound = false;

    while failedAttempts <= maxFailedAttempts  % loop to grow RRTs
        %% chooses a random configuration
        if rand < 0.5
            sample = rand(1,2) .* size(map);   % random sample
        else
            sample = goal; % sample taken as goal to bias tree generation to goal
        end
        
        %% selects the node in the RRT tree that is closest to qrand
        [A, I] = min( distanceCost(RRTree(:,1:2),sample) ,[],1); % find the minimum value of each column
        closestNode = RRTree(I(1),1:2);
        
        %% moving from qnearest an incremental distance in the direction of qrand
        theta = atan2(sample(1)-closestNode(1),sample(2)-closestNode(2));  % direction to extend sample to produce new node
        newPoint = double(int32(closestNode(1:2) + stepsize * [sin(theta)  cos(theta)]));
        if ~checkPath(closestNode(1:2), newPoint, map) % if extension of closest node in tree to the new point is feasible
            failedAttempts = failedAttempts + 1;
            continue;
        end
        
        if distanceCost(newPoint,goal) < threshold, pathFound = true; break; end % goal reached
        
        [A, I2] = min( distanceCost(RRTree(:,1:2),newPoint) ,[],1); % check if new node is not already pre-existing in the tree
        if distanceCost(newPoint,RRTree(I2(1),1:2)) < threshold, failedAttempts = failedAttempts + 1; continue; end 
        
        RRTree = [RRTree; newPoint I(1)]; % add node
        failedAttempts = 0;
        if display, line([closestNode(2);newPoint(2)],[closestNode(1);newPoint(1)], 'linewidth', 2, 'color', 'r');counter = counter + 1; M(counter) = getframe; end % Capture movie frame 
    end

    % getframe returns a movie frame, which is a structure having two fields
    if display && pathFound, line([closestNode(2);goal(2)],[closestNode(1);goal(1)]); counter = counter+1;M(counter) = getframe; end

    if display, disp('Path found.');  end
    if ~pathFound
        disp('no path found. maximum attempts reached');
        path_res = goal;
    else
       %% retrieve path from parent information
        path = [goal];
        prev = I(1);
        while prev > 0
            path = [RRTree(prev,1:2); path];
            prev = RRTree(prev,3);
        end
        pathLength = 0;
        for i=1:length(path)-1, pathLength = pathLength + distanceCost(path(i,1:2),path(i+1,1:2)); end % calculate path length
        fprintf('processing time=%d \nPath Length=%d \n\n', toc, pathLength); 
        path_res = path;
    end
end

%% distanceCost.m
function h=distanceCost(a,b)
	h = sqrt(sum((a-b).^2, 2));
end
	
%% checkPath.m	
function feasible=checkPath(n,newPos,map)
    feasible=true;
    dir=atan2(newPos(1)-n(1),newPos(2)-n(2));
    for r=0:0.5:sqrt(sum((n-newPos).^2))
        posCheck=n+r.*[sin(dir) cos(dir)];
        if ~(feasiblePoint(ceil(posCheck),map) && feasiblePoint(floor(posCheck),map) && ... 
                feasiblePoint([ceil(posCheck(1)) floor(posCheck(2))],map) && feasiblePoint([floor(posCheck(1)) ceil(posCheck(2))],map))
            feasible=false;break;
        end
        if ~feasiblePoint(newPos,map), feasible=false; end
    end
end


%% feasiblePoint.m
function feasible=feasiblePoint(point,map)
    feasible=true;
    % check if collission-free spot and inside maps
    if ~(point(1)>=1 && point(1)<=size(map,1) && point(2)>=1 && point(2)<=size(map,2) && map(point(1),point(2))==1)
        feasible=false;
    end
end